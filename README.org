* Overview
This is my personal setup for Emacs. Most everything should work right out of the box, but one may need to do some fanagling to get it to work the first time.
This whole setup essentially hinges on req-package, use-package's slightly more robust sibling. \\
One thing to note is that I use the Colemak keyboard layout, which means some of my keybindings may seem a little weird. I've thought of this and created a flag called
=flag-colemak= in init.el. If you want to use more QWERTY bindings, set that to 0 instead of 1. These other bindings will be listed
in [ ] next to the defaults. \\
I also use the super key (s- ) in a lot of my bindings. If you want to use them as-is, you need to look into getting the key to work
properly on your OS.
* Package List
** Control
*** [[https://github.com/jgkamat/alda-mode][alda-mode]]
Here mostly just because I can. The idea is that this mode allows you to write and listen to music all inside of Emacs
I'm currently having some issues getting it to work on my computer, so this may be leaving soon.
- keybinds:
  + g p - play the region
*** [[https://github.com/abo-abo/avy][avy]]
A magical package that let's you instantly jump to a spot onscreen using a few quick keystrokes. Note that I may start fiddling
with this, as it uses lots of QWERTY bindings for the jumping.
- keybinds:
  + C-; - prompt for 2 characters, then start a branching sequence to jump to whichever instance you want
  + C-M-; jump to whichever line you want
*** [[https://github.com/joodland/bm][bm]]
An extremely simple yet really helpful package that allows you to mark multiple different positions in a file and cycle through
them with ease. Really useful when you need to go looking for something but want to save your spot, or if you keep bouncing
between a few spots in a file.
- keybinds:
  + s-d - toggle whether this line should be bookmarked or not
  + s-n [s-j] - jump to the next bookmarked line
  + s-e [s-k] - jump to the previous bookmarked line
*** [[https://github.com/knu/elscreen][elscreen]]
You know how Emacs does multiple windows? Poorly, in my opinion. Why would you ever want to deal with layers of windows you 
can't see when you could just have different tabs that you can easily switch between that function identically to having
separate windows? With this, you can very quickly tell what all you have open in your other tabs and quickly jump to whichever
you want.
- keybinds:
  + C-c o - switch to the next screen
  + C-c h - switch to the previous screen
  + C-c s-o - prompt for a screen number, then jump to that screen
  + C-c 0 - delete this screen
  + C-c 1 - delete all other screens
  + C-c 2 - create a new screen
*** [[https://bitbucket.org/lyro/evil/wiki/Home][evil]]
Gets me out of a lot of text editor wars and allows me to use slightly less insane bindings for moving around. I'm not going
to list the keys, there are just too many.
*** [[https://github.com/cofi/evil-leader][evil-leader]]
Allows me to set a <leader> key, for me the spacebar, to use for another set of keybindings. Really useful for common operations
I do a lot, like saving for instance. Again, I won't list the keybindings here since there are so many.
*** [[https://github.com/gabesoft/evil-mc][evil-mc]]
Turns all those sublime text users' principle argument against Emacs on it's head and gives Emacs multiple cursors.
Some of these keybindings overwrite standard Emacs motion keys.
- keybinds
  + g r h - create a new cursor at this location
  + g r u - remove all cursors
  + g r m - create cursors at all matching strings
  + C-p - make a new cursor at the current match and go to the previous match
  + C-t - go to next match
  + C-n - make a new cursor at the current match and go to the next match
*** [[https://github.com/expez/evil-smartparens][evil-smartparens]]
I use this package basically as smartparens with little bits to make evil commands play nice.
*** [[https://www.emacswiki.org/emacs/InteractivelyDoThings][ido]]
Allows for more autocompletion when searching for files.
** Programming
*** [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]]
This automatically reindents everything all the time. It is currently disabled when in Windows, since it slows everything down
terribly and sometimes causes a crash.
*** [[https://github.com/randomphrase/company-c-headers][company-c-headers]]
An extension for company that allows for the autocompletion of c-headers.
*** [[https://github.com/jscheid/dtrt-indent][dtrt-indent]]
This is an especially useful package when editing code that somebody else wrote, as it automatically detects what the
indentation size is and sets yours to match.
*** [[http://ess.r-project.org/][ess-site]]
This probably won't be around for long; I'm really only using it for R support.
*** [[https://github.com/lewang/fic-mode][fic-mode]]
Another tiny yet remarkably helpful package that just highlights keywords like TODO or FIXME in comments.
It is currently turned on in any prog-mode.
*** [[https://github.com/flycheck/flycheck][flycheck]]
A magic little syntax checker for various languages like C. It sets a compiler flag for gnu11, since my computer doesn't
compile for loops and the like by default for some reason. Triggered in any prog-mode.
*** [[https://github.com/leoliu/ggtags][ggtags]]
C/C++ program tagging. This allows one to easily jump around a program to definitions and usages of variables and functions.
- keybinds:
  + M-g M-g - go to either the definition or usage of the symbol at point
  + M-g r - return to the last point jumped from
*** [[https://www.emacswiki.org/emacs/HideShow][hs]]
A very effective code folding package that is started in any prog-mode.
- keybinds:
  + C-c C-f - toggle code folding
*** [[https://github.com/bbatsov/projectile][projectile]]
Helps finding files in a given project. I'm not entirely sure if or how this is working, so I'll fiddle around with it.
*** [[https://github.com/syohex/emacs-quickrun][quickrun]]
Ever wanted to just compile and run a program with one short keystroke? This allows you to do just that.
- keybinds:
  + <SPC> r - compile and run the current program
** Usability
*** [[https://github.com/cdominik/cdlatex][cdlatex]]
Provides quick shortcuts for lots of long latex symbols. For example, `a turns into =\alpha=.
*** [[https://github.com/mrkkrp/char-menu][char-menu]]
Allows you to build your own tree of special characters that can be accessed via an avy-menu...menu.
- keybinds:
  + M-i - pull up the special character menu
*** [[https://github.com/darksmile/cheatsheet/][cheatsheet]]
Just shows a quick list of handwritten keybindings and descriptions that you can pull up whenever you want. This section
makes heavy usage of the =(substitute-command-keys)= function, which looks to see whatever the command is currently bound
to and uses its string. This means I don't have to rewrite this whenever I rebind keys.
- keybinds:
  + C-h h - show the cheatsheet list
*** [[https://github.com/company-mode/company-mode][company]]
Autocomplete that goes with just about everything. This is currently enabled globally.
*** [[https://github.com/myrjola/diminish.el][diminish]]
Allows you to stop showing the name of specific minor modes.
*** [[https://github.com/skeeto/elfeed][elfeed]]
An RSS reader that loads from elfeed.org. Basically I use it to check GitHub and various Emacs sites.
- keybinds:
  + s-l - launch elfeed
  + g - (in elfeed mode) refresh the feed
  + r - (in elfeed mode) mark as read
  + u - (in elfeed mode) mark as unread
* Bucket List
Things I'd like to fix/improve when I have the time and know-how.

** Finish this README
- someday
** Adjust More Bindings to Colemak
- make C-n/C-e be page down/up
- get avy-menu to use Colemak home row
** Readable .emacs.d
- basically the next step after this README:
http://orgmode.org/worg/org-contrib/babel/intro.html#literate-emacs-init
** Java
- find a nice syntax checker
** Email
- it would be nice to check email in emacs; I'm currently looking at mu4e
- assuming I go with that, remember packages evil-mu4e and org-mu4e
** Loadup Speed
- figure out why it takes at least 10 seconds to start up
** Colored elscreen Tabs
- I'm a sucker for colorful things
** Clean Up Mode Line
- there are currently lots of things that are smooshed to the right side, I'd like to make it a little prettier
** Better IDE-style things?
- maybe [[http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html][CEDET]]?
